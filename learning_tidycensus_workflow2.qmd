---
title: "TidyCensus Multi-Variable Research Workflow"
subtitle: "Finding ACS Tables for Earnings × Demographic Analysis"
description: ""
author: 
  - name: "Dan Swart, CPA (ret)"
    affiliations:
      - "SCUC-ISD Board of Trustees"
      - "Seat 6"
date: "`r Sys.Date()`"
date-format: long
# bibliography: manual-refs.bib
format:
  html:
    resources:
      - reference-backlinks.js
    include-after-body:    
      - text: |
          # <script type="text/javascript" src="reference-backlinks.js"></script>
    default: true         
    code-copy: true
    code-link: true        # This adds individual buttons
    code-fold: true        # Hide code by default, show on click
    code-summary: "Show the code"
    code-overflow: wrap
    code-block-bg: "#FAEBD7"
    code-block-border-left: "#31BAE9"
    # embed-resources: true
    include-in-header: header.html
    css:
      - swart.css
      - tachyons.min.css
      - r-colors.css
    fontsize: 18pt
    lightbox: true
    page-layout: full
    fig-width: 12
    fig-height: 10
    fig-dpi: 300
    html-math-method: katex
    df-print: paged
    toc: true
    toc-float: true
    citeproc: true
    link-citations: true
    linestretch: 1.0
    
    
    
  typst:
    fig-width: 12
    fig-height: 10
    fig-dpi: 300
    margin:
      x: 1in
      y: 1in
    toc: true
    fontsize: 14pt
    # mainfont: "Cabin"
    
  revealjs:
    slide-number: true
    transition: fade
    code-overflow: wrap
    center: true
    smaller: true
    scrollable: true
    chalkboard: true
    multiplex: false
    theme: solarized
    reference-location: margin
    logo: img/red-cross-640-435.png
    footer: "Footer text"
    code-block-height: 650px



  # docx:
  #   highlight-style: github
  #   fig_caption: true



editor: source

quarto:
  render:
    cache-refresh: true


# for .qmd filesd
execute:
  echo: true
  message: false
  warning: false
  eval: true
  fig-width: 12
  fig-height: 10


# for .rmd files
knitr:
  opts_chunk:
    echo: true
    error: false
    warning: false
    message: false
    eval: true
    cache: false

---


```{r}
#| label: setup
#| include: false

# Prevent scientific notation globally
options(scipen = 999)


options(tigris_use_cache = TRUE)

# install.packages(c("mapview", "survey", "srvyr", "arcgislayers"))

# census_api_key("95496766c51541ee6f402c1e1a8658581285b759", install = TRUE, overwrite = TRUE)


# For me, I ALWAYS begin with the most recent development version of TidyCensus
remotes::install_github("walkerke/tidycensus")

# load libraries

# library(readxl)
# library(writexl) 
# library(tidyr) 
# library(readr) 
# library(purrr) 
# library(stringr) 
# library(forcats) 
# library(lubridate) 
# library(janitor) 
# library(ggtext) 
# library(paletteer) 
# library(viridis) 
# library(RColorBrewer) 
# library(wesanderson) 
# library(dutchmasters) 
# library(gghighlight) 
# library(monochromeR) 
# library(ggforce) 
# library(ggthemes)
# library(gt)
# library(gtExtras)
# library(tidyverse)
# library(plotly)
# library(ggplot2)
# library(tibble)
# library(patchwork)
# library(ppcor)
# library(ggplot2)
# library(corrplot)
# library(ggcorrplot)
# library(car)
# library(WRS2)
# library(boot)
# library(BayesFactor)
# library(pwr)
# library(qgraph)
# library(scales)
# library(here)
# library(ggdag)      # For plotting DAGs
# library(dagitty)    # For working with DAG logic
# library(DiagrammeR) # For complete control of the layout
# library(knitr)      # For controlling rendering
# library(kableExtra) # For tables summarizing results
library(DT)         # For rendering tables that kableExtra cannot (e.g., symbols)
# library(lavaan)     # For latent variable analysis
# library(ggpubr)
# library(rethinking)
# library(broom)

library(tidyverse)
library(tidycensus)


# Force dplyr's select to take precedence
select <- dplyr::select
filter <- dplyr::filter

# Set global theme for consistent plots
theme_set(theme_minimal(base_size = 20) + 
          theme(
    plot.title = element_text(face = "bold", size = 26),    # adjust title size
    plot.subtitle = element_text(face = "bold", size = 24), # adjust subtitle size
    axis.title.x = element_text(face = "bold", size = 22),
    axis.title.y = element_text(face = "bold", size = 22),
    axis.text.x = element_text(face = "bold", size = 22, angle = 45, hjust = 1),
    legend.position = "bottom",
    strip.text = element_text(face = "bold"),
    panel.spacing.x = unit(1.5, "cm"),  # Horizontal spacing only
    panel.spacing.y = unit(1.5, "cm"),   # Vertical spacing only
    plot.margin = margin(20, 20, 20, 20, "pt")
    )
)


# Set seed for reproducibility
set.seed(123)

```

## Overview

This workflow demonstrates strategies for finding American Community Survey (ACS) tables that contain multiple demographic characteristics simultaneously, specifically focusing on:

-   Earnings/Income
-   Sex
-   Marital Status
-   Occupation
-   Years of Experience



## Step 1: Load All Available Variables

```{r load-variables}
# Load all ACS 5-year variables for 2023
all_vars_5 <- load_variables(2023, "acs5")

# Examine structure
glimpse(all_vars_5)
```



## Step 2: Initial Exploration (The "Hail Mary" Approach)

```{r initial-search}

# Original approach: search for all five variables in concept field
all_variables <- all_vars_5 %>%
  filter(str_detect(concept, "earning|income") &
         str_detect(concept, "sex") &
         str_detect(concept, "marital") &
         str_detect(concept, "occupation") &
         str_detect(concept, "experience"))

# Result: Zero matches (as expected)
nrow(all_variables)

```


**Reality Check:** This approach yields zero results because ACS tables typically organize data around 1-2 main dimensions, not five simultaneously.



## Step 3: Strategic Variable Discovery

### 3.1 Search Concept AND Label Fields for each variable


(***earnings*** × sex × marital status x occupation x years of experience)

#### 'earnings|income|wage' - instances in dataframe

```{r search-both-fields}

# Look for any mention of your variables across both fields
earnings_vars <- all_vars_5 %>%
  filter(str_detect(tolower(concept), "earning|income|wage") | 
         str_detect(tolower(label), "earning|income|wage"))

  View(earnings_vars)

  
# Check what concepts exist
earnings_concepts <- earnings_vars %>% 
  distinct(concept) %>%
  arrange(concept)

  View(earnings_concepts)


# Check what labels exist
earnings_labels <- earnings_vars %>% 
  distinct(label) %>% 
  arrange(label)

  View(earnings_labels)

print(paste("Found", nrow(earnings_concepts), "different earnings-related concepts"))

```

Results:  8765 obs. of 4 variables


Display results in DT Tables

```{r display-earnings-concepts-and-labels}
# Display earnings concepts
earnings_concepts %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

# Display earnings labels
earnings_labels %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

```




(earnings × ***sex*** × marital status x occupation x years of experience)

#### 'sex' - instances in dataframe

```{r}

# Look for any mention of your variables across both fields
sex_vars <- all_vars_5 %>%
  filter(str_detect(tolower(concept), "sex") | 
         str_detect(tolower(label), "sex"))

  View(sex_vars)

  
# Check what concepts exist
sex_concepts <- sex_vars %>% 
  distinct(concept) %>%
  arrange(concept)

  View(sex_concepts)


# Check what labels exist
sex_labels <- sex_vars %>% 
  distinct(label) %>% 
  arrange(label)

  View(sex_labels)

print(paste("Found", nrow(sex_concepts), "different sex-related concepts"))

```

Results:  6845 obs. of 4 variables


Display results in DT Tables

```{r display-earnings-concepts-and-labels}
# Display earnings concepts
sex_concepts %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

# Display earnings labels
sex_labels %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

```





(earnings × sex × ***marital status*** x occupation x years of experience)

#### 'marital status' - instances in dataframe

```{r}

# Look for any mention of your variables across both fields
marital_vars <- all_vars_5 %>%
  filter(str_detect(tolower(concept), "marital") | 
         str_detect(tolower(label), "marital"))

  View(marital_vars)

  
# Check what concepts exist
marital_concepts <- marital_vars %>% 
  distinct(concept) %>%
  arrange(concept)

  View(marital_concepts)


# Check what labels exist
marital_labels <- marital_vars %>% 
  distinct(label) %>% 
  arrange(label)

  View(marital_labels)

print(paste("Found", nrow(marital_concepts), "different marital-related concepts"))

```

Results:  918 obs. of 4 variables


Display results in DT Tables

```{r display-earnings-concepts-and-labels}
# Display earnings concepts
marital_concepts %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

# Display earnings labels
marital_labels %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

```







(earnings × sex × marital status x ***occupation*** x years of experience)

#### 'occupation' - instances in dataframe

```{r}

# Look for any mention of your variables across both fields
occupation_vars <- all_vars_5 %>%
  filter(str_detect(tolower(concept), "occupation") | 
         str_detect(tolower(label), "occupation"))

  View(occupation_vars)

  
# Check what concepts exist
occupation_concepts <- occupation_vars %>% 
  distinct(concept) %>%
  arrange(concept)

  View(occupation_concepts)


# Check what labels exist
occupation_labels <- occupation_vars %>% 
  distinct(label) %>% 
  arrange(label)

  View(occupation_labels)

print(paste("Found", nrow(occupation_concepts), "different occupation-related concepts"))

```

Results:  5843 obs. of 4 variables


Display results in DT Tables

```{r display-earnings-concepts-and-labels}
# Display earnings concepts
occupation_concepts %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

# Display earnings labels
occupation_labels %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

```








(earnings × sex × marital status x occupation x ***years of experience***)

#### 'experience' - instances in dataframe

```{r}

# Look for any mention of your variables across both fields
experience_vars <- all_vars_5 %>%
  filter(str_detect(tolower(concept), "experience") | 
         str_detect(tolower(label), "experience"))

  View(experience_vars)

  
# Check what concepts exist
experience_concepts <- experience_vars %>% 
  distinct(concept) %>%
  arrange(concept)

  View(experience_concepts)


# Check what labels exist
experience_labels <- experience_vars %>% 
  distinct(label) %>% 
  arrange(label)

  View(experience_labels)

print(paste("Found", nrow(experience_concepts), "different experience-related concepts"))

```

Results:  1295 obs. of 4 variables


Display results in DT Tables

```{r display-earnings-concepts-and-labels}
# Display earnings concepts
experience_concepts %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

# Display earnings labels
experience_labels %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

```




#### 'never_married' - instances in dataframe

```{r}

# Look for any mention of your variables across both fields
never_married_vars <- all_vars_5 %>%
  filter(str_detect(tolower(concept), "never married") | 
         str_detect(tolower(label), "never married"))

  View(never_married_vars)

  
# Check what concepts exist
never_married_concepts <- never_married_vars %>% 
  distinct(concept) %>%
  arrange(concept)

  View(never_married_concepts)


# Check what labels exist
never_married_labels <- never_married_vars %>% 
  distinct(label) %>% 
  arrange(label)

  View(never_married_labels)

print(paste("Found", nrow(never_married_concepts), "different never_married-related concepts"))

```

Results:  186 obs. of 4 variables


Display results in DT Tables

```{r display-earnings-concepts-and-labels}
# Display earnings concepts
never_married_concepts %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

# Display earnings labels
never_married_labels %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))

```


### Conclusion:  there is no way to isolate a 'never-married female' from the 'never-married, widowed, or divorced' females.  They are lumped together.  NOT WHAT I'M LOOKING FOR IN THIS STUDY.







### 3.2 Search for Combinations of 2-3 Variables

```{r combination-search}
# Earnings × Sex
earnings_sex <- all_vars_5 %>%
  filter((str_detect(tolower(concept), "earning|income|wage")) &
         (str_detect(tolower(concept), "sex|male|female")))

# Earnings × Marital Status  
earnings_marital <- all_vars_5 %>%
  filter((str_detect(tolower(concept), "earning|income|wage")) &
         (str_detect(tolower(concept), "marital")))

# Earnings × Occupation
earnings_occupation <- all_vars_5 %>%
  filter((str_detect(tolower(concept), "earning|income|wage")) &
         (str_detect(tolower(concept), "occupation")))

# Display results
combinations_summary <- tibble(
  combination = c("Earnings × Sex", "Earnings × Marital", "Earnings × Occupation"),
  n_variables = c(nrow(earnings_sex), nrow(earnings_marital), nrow(earnings_occupation))
)

combinations_summary
```

### 3.3 Explore Specific Table Series

```{r table-series}
# B20 series: Earnings tables
b20_tables <- all_vars_5 %>%
  filter(str_starts_with(name, "B20")) %>%
  distinct(concept) %>%
  arrange(concept)

# B08 series: Commuting and occupation tables  
b08_tables <- all_vars_5 %>%
  filter(str_starts_with(name, "B08")) %>%
  distinct(concept) %>%
  arrange(concept)

# B19 series: Income tables
b19_tables <- all_vars_5 %>%
  filter(str_starts_with(name, "B19")) %>%
  distinct(concept) %>%
  arrange(concept)

print(paste("B20 (Earnings) tables:", nrow(b20_tables)))
print(paste("B08 (Commuting/Occupation) tables:", nrow(b08_tables)))
print(paste("B19 (Income) tables:", nrow(b19_tables)))
```

```{r display-key-tables}
# Display most promising table series
key_tables <- bind_rows(
  b20_tables %>% mutate(series = "B20"),
  b08_tables %>% mutate(series = "B08"), 
  b19_tables %>% mutate(series = "B19")
) %>%
  select(series, concept)

key_tables %>%
  DT::datatable(options = list(pageLength = 15, scrollX = TRUE))
```

## Step 4: Deep Dive into Promising Tables

```{r promising-tables}
# Function to examine a specific table in detail
examine_table <- function(table_pattern) {
  all_vars_5 %>%
    filter(str_detect(name, table_pattern)) %>%
    select(name, label, concept) %>%
    head(20)
}

# Example: Look at B20017 (Median Earnings by Sex and Work Experience)
b20017_vars <- examine_table("B20017")
print("B20017 Variables (Median Earnings by Sex and Work Experience):")
```

```{r display-b20017}
b20017_vars %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))
```

## Step 5: Alternative Approaches

### 5.1 Consider PUMS Data

```{r pums-option, eval=FALSE}
# For complex multi-dimensional analysis, consider PUMS (Public Use Microdata)
# This gives you individual-level records that you can cross-tabulate yourself

# Example PUMS call (not run here):
# pums_data <- get_pums(
#   variables = c("SEX", "MAR", "OCCP", "WAGP", "AGEP"),
#   state = "CA",
#   year = 2023,
#   survey = "acs5"
# )
```

### 5.2 Multiple Table Strategy

```{r multiple-table-strategy}
# Strategy: Use multiple related tables and join them
# Example workflow for combining tables:

# 1. Get earnings by sex from one table
# 2. Get marital status distributions from another table  
# 3. Get occupation data from a third table
# 4. Use geographic identifiers to join at appropriate level

# This requires careful consideration of:
# - Geographic levels (state, county, tract, etc.)
# - Margin of error calculations when combining estimates
# - Potential ecological fallacy issues
```

## Step 6: Recommended Workflow

```{r recommended-workflow, eval=FALSE}
# 1. Start with PUMS for complex multi-dimensional analysis
pums_data <- get_pums(
  variables = c("SEX", "MAR", "OCCP", "WAGP", "AGEP", "WKHP"),
  state = "all",  # or specific states
  year = 2023,
  survey = "acs5"
)

# 2. For summary statistics, identify best 2-3 variable combinations:
# - Table B20017: Median earnings by sex and work experience  
# - Table B19001: Household income distribution
# - Custom tabulations from PUMS data

# 3. Use get_acs() for specific tables:
earnings_by_sex <- get_acs(
  geography = "state",
  table = "B20017",
  year = 2023,
  survey = "acs5"
)
```

## Next Steps

1.  **Prioritize Your Variables**: Identify which 2-3 characteristics are most important
2.  **Consider PUMS**: For maximum flexibility in cross-tabulations
3.  **Geographic Level**: Decide on appropriate geographic granularity
4.  **Margin of Error**: Plan for uncertainty quantification in combined estimates
5.  **Validation**: Cross-check results with multiple data sources when possible

## Resources

-   [TidyCensus Documentation](https://walker-data.com/tidycensus/)
-   [Census Table Finder](https://data.census.gov/cedsci/)
-   [ACS Technical Documentation](https://www.census.gov/programs-surveys/acs/technical-documentation.html)
-   [PUMS Data Dictionary](https://www.census.gov/programs-surveys/acs/microdata/documentation.html)

## Step 7: Finding Which Table Contains Each Variable

### 7.1 Understanding Variable Name Structure

```{r variable-structure}
# Load variables again for demonstration
all_vars_5 <- load_variables(2023, "acs5")

# Examine the structure of variable names
sample_vars <- all_vars_5 %>%
  head(20) %>%
  select(name, label, concept)

# Variable names follow pattern: [TABLE]_[SEQUENCE][E/M]
# E = Estimate, M = Margin of Error
# Examples: B01001_001E, B19013_001E, etc.

sample_vars
```

### 7.2 Extract Table Names from Variable Names

```{r extract-tables}
# Extract table names from variable names
all_vars_with_tables <- all_vars_5 %>%
  mutate(
    # Remove the _XXX[E/M] suffix to get table name
    table_name = str_extract(name, "^[A-Z][0-9]{5}[A-Z]*"),
    # Extract the sequence number and estimate/MOE indicator
    sequence = str_extract(name, "_[0-9]{3}[EM]$"),
    # Clean sequence to just the number
    sequence_num = as.numeric(str_extract(sequence, "[0-9]{3}")),
    # Estimate or Margin of Error
    est_moe = str_extract(sequence, "[EM]")
  )

# Look at the structure
glimpse(all_vars_with_tables)
```

### 7.3 Find All Tables and Their Variables

```{r tables-summary}
# Summary of all tables
tables_summary <- all_vars_with_tables %>%
  filter(!is.na(table_name)) %>%
  group_by(table_name, concept) %>%
  summarise(
    n_variables = n(),
    min_sequence = min(sequence_num, na.rm = TRUE),
    max_sequence = max(sequence_num, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(table_name)

print(paste("Total number of tables:", nrow(tables_summary)))

# Display first 20 tables
head(tables_summary, 20)
```

### 7.4 Search for Specific Variables by Table

```{r search-by-table}
# Function to find all variables in a specific table
get_table_variables <- function(table_name) {
  all_vars_with_tables %>%
    filter(str_detect(name, paste0("^", table_name))) %>%
    select(name, label, concept, sequence_num, est_moe) %>%
    arrange(sequence_num)
}

# Example: Get all variables in table B20017 (earnings by sex and experience)
b20017_all <- get_table_variables("B20017")
print(paste("Table B20017 has", nrow(b20017_all), "variables"))
```

```{r display-table-variables}
b20017_all %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))
```

### 7.5 Find Tables Containing Specific Keywords

```{r keyword-search}
# Function to find tables containing specific keywords
find_tables_by_keyword <- function(keyword) {
  tables_summary %>%
    filter(str_detect(tolower(concept), tolower(keyword))) %>%
    arrange(desc(n_variables))
}

# Find all tables related to earnings
earnings_tables <- find_tables_by_keyword("earning")
print(paste("Found", nrow(earnings_tables), "tables related to earnings"))

earnings_tables %>%
  head(10)
```

### 7.6 Reverse Lookup: From Variable to Table

```{r reverse-lookup}
# Function to find which table a specific variable belongs to
find_variable_table <- function(variable_name) {
  all_vars_with_tables %>%
    filter(name == variable_name) %>%
    select(name, table_name, label, concept)
}

# Example: Find what table contains B19013_001E (median household income)
variable_info <- find_variable_table("B19013_001E")
variable_info
```

### 7.7 Data Source Information

```{r data-source}
# The load_variables() function pulls from Census API endpoints:
# https://api.census.gov/data/2023/acs/acs5/variables.json

# You can also access this directly:
api_url <- "https://api.census.gov/data/2023/acs/acs5/variables.json"
print(paste("Data source:", api_url))

# The four columns come from the JSON structure:
# - name: variable identifier 
# - label: descriptive text
# - concept: table/topic description
# - geography: geographic levels available (not always populated)
```

### 7.8 Complete Table Exploration Function

```{r exploration-function}
# Comprehensive function to explore any table
explore_table <- function(table_name) {
  
  # Get all variables for this table
  table_vars <- get_table_variables(table_name)
  
  # Get estimates only (exclude margins of error)
  estimates_only <- table_vars %>%
    filter(est_moe == "E")
  
  # Print summary
  cat("Table:", table_name, "\n")
  cat("Concept:", unique(table_vars$concept), "\n")
  cat("Total variables:", nrow(table_vars), "\n")
  cat("Estimates:", nrow(estimates_only), "\n")
  cat("Margins of Error:", nrow(table_vars) - nrow(estimates_only), "\n\n")
  
  # Return the estimates for viewing
  return(estimates_only)
}

# Example usage
b19001_info <- explore_table("B19001")
```

```{r display-exploration}
b19001_info %>%
  DT::datatable(options = list(pageLength = 10, scrollX = TRUE))
```

## Session Info

```{r session-info}
sessionInfo()
```
